{"version":3,"file":"component---src-pages-companies-tsx-205c42576667f7cc223d.js","mappings":"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","sources":["webpack://welte-ads/./src/components/WorldMap.tsx","webpack://welte-ads/./src/labels/coordinates.ts","webpack://welte-ads/./src/pages/companies.tsx","webpack://welte-ads/./src/helpers/stringToColour.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport * as d3 from 'd3'\nimport { stringToColour } from \"../helpers/stringToColour\"\n\nexport interface Coordinate {\n    lat: number\n    long: number\n}\n\nexport interface Marker {\n    coordinate: Coordinate\n    companyName: string\n    adCount: number\n}\n\ninterface WorldMapProps {\n    markers: Marker[]\n}\n\nexport const WorldMap = ({ markers }: WorldMapProps) => {\n    const svgRef = useRef<SVGSVGElement>(null)\n\n    useEffect(() => {\n        if (!svgRef.current) return\n\n        svgRef.current.innerHTML = ''\n\n        // The svg\n        const svg = d3.select(svgRef.current),\n            width = +svg.attr(\"width\"),\n            height = +svg.attr(\"height\");\n\n        // Map and projection\n        const projection = d3.geoMercator()\n            .center([0, 20])                // GPS of location to zoom on\n            .scale(99)                       // This is like the zoom\n            .translate([width / 2, height / 2])\n\n        const fetchMap = async () => {\n            const worldMap = await fetch('https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson')\n            const dataGeo = await worldMap.json()\n\n            // Scale for bubble size\n            const valueExtent = d3.extent(markers, marker => marker.adCount) as [number, number]\n            const size = d3.scaleSqrt()\n                .domain(valueExtent)\n                .range([1, 50])\n\n            // Draw the map\n            svg.append(\"g\")\n                .selectAll(\"path\")\n                .data(dataGeo.features)\n                .join(\"path\")\n                .attr(\"fill\", \"#b8b8b8\")\n                .attr(\"d\", d3.geoPath()\n                    .projection(projection) as any)\n                .style(\"stroke\", \"none\")\n                .style(\"opacity\", .3)\n\n            // Add a circle for every marker\n            svg\n                .selectAll(\"circles\")\n                .data(markers.sort((a: Marker, b: Marker) => b.adCount - a.adCount))\n                .join(\"circle\")\n                .attr(\"cx\", (d: Marker) => projection([d.coordinate.long, d.coordinate.lat])![0])\n                .attr(\"cy\", (d: Marker) => projection([d.coordinate.long, d.coordinate.lat])![1])\n                .attr(\"r\", (d: Marker) => size(+d.adCount))\n                .style(\"fill\", (d: Marker) => stringToColour(d.companyName))\n                .attr(\"fill-opacity\", .3)\n                .attr('stroke', 'black')\n                .attr('stroke-width', 0.5)\n\n            // Add legend: circles\n            const valuesToShow = [5, 10, 20]\n            const xCircle = 40\n            const xLabel = 90\n            svg\n                .selectAll(\"legend\")\n                .data(valuesToShow)\n                .join(\"circle\")\n                .attr(\"cx\", xCircle)\n                .attr(\"cy\", d => height - size(d))\n                .attr(\"r\", d => size(d))\n                .style(\"fill\", \"none\")\n                .attr(\"stroke\", \"black\")\n\n            // Add legend: segments\n            svg\n                .selectAll(\"legend\")\n                .data(valuesToShow)\n                .join(\"line\")\n                .attr('x1', d => xCircle + size(d))\n                .attr('x2', xLabel)\n                .attr('y1', d => height - size(d))\n                .attr('y2', d => height - size(d))\n                .attr('stroke', 'black')\n                .style('stroke-dasharray', ('2,2'))\n\n            // Add legend: labels\n            svg\n                .selectAll(\"legend\")\n                .data(valuesToShow)\n                .join(\"text\")\n                .attr('x', xLabel)\n                .attr('y', d => height - size(d))\n                .text(d => d)\n                .style(\"font-size\", 10)\n                .attr('alignment-baseline', 'middle')\n        }\n\n        fetchMap()\n    }, [markers])\n\n    return (\n        <>\n            <svg ref={svgRef} width={900} height={500} />\n        </>\n    )\n}","import { Coordinate } from \"../components/worldMap\";\n\nexport const coordinates = {\n    'https://www.geonames.org/5128581': { lat: 40.71427, long: -74.00597 },\n    'https://www.geonames.org/2643743': { lat: 51.50853, long: -0.12574 },\n    'https://www.geonames.org/2879139': { lat: 51.33962, long: 12.37129 },\n    'https://www.geonames.org/2867714': { lat: 48.13743, long: 11.57549 },\n    'https://www.geonames.org/5368361': { lat: 34.05223, long: -118.24368 },\n    'https://www.geonames.org/4930956': { lat: 42.35843, long: -71.05977 },\n    'https://www.geonames.org/5074472': { lat: 41.25626, long: -95.94043 },\n    'https://www.geonames.org/4140963': { lat: 38.89511, long: -77.03637 },\n    'https://www.geonames.org/2950159': { lat: 52.52437, long: 13.41053 },\n    'https://www.geonames.org/4990729': { lat: 42.33143, long: -83.04575 }\n} as { [index: string]: Coordinate }\n","import React from 'react'\nimport Layout from \"../components/layout\"\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Container, Typography } from '@mui/material'\nimport { Marker, WorldMap } from '../components/WorldMap'\nimport { coordinates } from '../labels/coordinates'\n\nconst Companies = () => {\n    const data = useStaticQuery(graphql`\n        query {\n          allMetadata {\n            nodes {\n              dates\n              company {\n                name \n                link\n              }\n            }\n          }\n        }\n    `)\n\n    const companies = data.allMetadata.nodes.map((node: any) => node.company) as { name: string, link: string}[]\n    console.log('companies=', companies)\n    const markers = companies.reduce((acc, curr) => {\n      const coord = coordinates[curr.link] || { lat: 0, long: 0 }\n      const existingMarker = acc.find(marker =>\n          marker.companyName === curr.name\n          && marker.coordinate.lat === coord.lat\n          && marker.coordinate.long === coord.long)\n      if (existingMarker) {\n        existingMarker.adCount += 1\n        return acc\n      }\n\n      acc.push({\n        coordinate: coord,\n        companyName: curr.name,\n        adCount: 1\n      })\n\n      return acc\n    }, [] as Marker[])\n\n    console.log('markers=', markers)\n\n    return (\n        <Layout location=\"Companies\" editionPage={false}>\n            <Container component=\"main\" maxWidth=\"md\">\n                <h2>Companies</h2>\n                <Typography>\n                    Different companies advertised for the Welte-Mignon all \n                    over the world.\n                </Typography>\n\n                <WorldMap markers={markers} />\n            </Container>\n        </Layout>\n    )\n}\n\nexport default Companies\n","\nexport const stringToColour = (str: string) => {\n    let hash = 0;\n    str.split('').forEach(char => {\n        hash = char.charCodeAt(0) + ((hash << 5) - hash);\n    });\n    let colour = '#';\n    for (let i = 0; i < 3; i++) {\n        const value = (hash >> (i * 8)) & 255;\n        colour += value.toString(16).padStart(2, '0');\n    }\n    return colour;\n};\n"],"names":["WorldMap","_ref","markers","svgRef","useRef","useEffect","current","innerHTML","svg","d3","width","attr","height","projection","center","scale","translate","async","worldMap","fetch","dataGeo","json","valueExtent","marker","adCount","size","domain","range","append","selectAll","data","features","join","style","sort","a","b","d","coordinate","long","lat","stringToColour","companyName","valuesToShow","text","fetchMap","___EmotionJSX","React","ref","coordinates","Companies","companies","useStaticQuery","allMetadata","nodes","map","node","company","console","log","reduce","acc","curr","coord","link","existingMarker","find","name","push","Layout","location","editionPage","Container","component","maxWidth","Typography","str","hash","split","forEach","char","charCodeAt","colour","i","toString","padStart"],"sourceRoot":""}